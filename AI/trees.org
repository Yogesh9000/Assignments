#+title: Trees

* General Tree Definitions
+ A tree T is a finite set of one or more nodes such that there is one designated node R , called the root of T.
+ If the set (T-{R}) is not empty, these nodes are partitioned into n>0 disjoint sets T0, T1, , Tn-1 , each of which is a tree, and whose roots R1,R2,...,Rn, respectively, are children of R.
+ The subsets Ti(0=i<n) are said to be subtrees of T.
+ These subtrees are ordered in that Ti is said to come before Tj if i<j.
+ By convention, the subtrees are arranged from left to right with subtree T0 called the leftmost child of R.
+ A node's out degree is the number of children for that node. A forest is a collection of one or more trees.
+ Each node in a tree has precisely one parent, except for the root, which has no parent. From this observation, it immediately follows that a tree with n nodes must have n-1 edges because each node, aside from the root, has one edge connecting that node to its parent.

* General Tree ADT
#+begin_src java
// General tree node ADT
public interface GTNode {
  public Object value();
  public boolean isLeaf();
  public GTNode parent();
  public GTNode leftmostChild();
  public GTNode rightSibling();
  public void setValue(Object value);
  public void setParent(GTNode par);
  public void insertFirst(GTNode n);
  public void insertNext(GTNode n);
  public void removeFirst();
  public void removeNext();
}

// General tree ADT
public interface GenTree {
  public void clear();      // Clear the tree
  public GTNode root();     // Return the root
  // Make the tree have a new root, give first child and sib
  public void newroot(Object value, GTNode first, GTNode sib);
  public void newleftchild(E value); // Add left child
}
#+end_src
